import 'dart:async';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes
// ignore_for_file: unnecessary_brace_in_string_interps

//WARNING: This file is automatically generated. DO NOT EDIT, all your changes would be lost.

typedef LocaleChangeCallback = void Function(Locale locale);

class I18n implements WidgetsLocalizations {
  const I18n();
  static Locale _locale;
  static bool _shouldReload = false;

  static set locale(Locale newLocale) {
    _shouldReload = true;
    I18n._locale = newLocale;
  }

  static const GeneratedLocalizationsDelegate delegate =
      GeneratedLocalizationsDelegate();

  /// function to be invoked when changing the language
  static LocaleChangeCallback onLocaleChanged;

  static I18n of(BuildContext context) =>
      Localizations.of<I18n>(context, WidgetsLocalizations);

  @override
  TextDirection get textDirection => TextDirection.ltr;

  /// "Sanfield Mobile App"
  String get main_title => "Sanfield Mobile App";

  /// "User Name"
  String get login_user_name => "User Name";

  /// "Password"
  String get login_password => "Password";

  /// "Reset"
  String get login_reset => "Reset";

  /// "Login"
  String get login_login => "Login";

  /// "user name cannot be empty"
  String get login_user_empty_msg => "user name cannot be empty";

  /// "password cannot be empty"
  String get login_password_empty_msg => "password cannot be empty";

  /// "Tap back again to leave"
  String get login_back_tap => "Tap back again to leave";

  /// "Quick Links"
  String get main_link => "Quick Links";

  /// "Current Weather"
  String get main_weather => "Current Weather";

  /// "Updated at"
  String get main_updated => "Updated at";

  /// "Message"
  String get main_system_message => "Message";

  /// "Please confirm that you want to exit the current application?"
  String get main_system_message_exit =>
      "Please confirm that you want to exit the current application?";

  /// "New version detected ${version}"
  String main_check_version(String version) =>
      "New version detected ${version}";

  /// "Do you want to update to the latest version?"
  String get main_update_version_confirm =>
      "Do you want to update to the latest version?";

  /// "Yes"
  String get main_update_yes => "Yes";

  /// "No"
  String get main_update_no => "No";

  /// "Failed to obtain token."
  String get main_get_token_fail => "Failed to obtain token.";

  /// "The current login user has expired, please login again."
  String get main_token_expiry =>
      "The current login user has expired, please login again.";

  /// "Login failed, please try again."
  String get login_login_fail => "Login failed, please try again.";

  /// "downloading,please waiting…"
  String get main_update_download => "downloading,please waiting…";

  /// "humidity"
  String get main_weather_humidity => "humidity";

  /// "Ver"
  String get drawer_version => "Ver";

  /// "logout"
  String get drawer_exit => "logout";

  /// "Setting"
  String get drawer_setting => "Setting";

  /// "Language"
  String get setting_language => "Language";

  /// "Please select"
  String get setting_language_select => "Please select";

  /// "confirm to logout?"
  String get drawer_exit_message => "confirm to logout?";

  /// "Save"
  String get language_save_yes => "Save";

  /// "Cancel"
  String get language_save_no => "Cancel";

  /// "Scan Attendance"
  String get acs_scan_attendance => "Scan Attendance";

  /// "Worker Info"
  String get acs_scan_worker => "Worker Info";

  /// "ACS Apps List"
  String get acs_applications_list => "ACS Apps List";

  /// "You cannot into a subroutine without selecting a site"
  String get acs_unselected_site =>
      "You cannot into a subroutine without selecting a site";

  /// "Please select site"
  String get acs_select_site => "Please select site";

  /// "Please select location"
  String get acs_select_connection => "Please select location";

  /// "Error exists. Please contact IT operator."
  String get acs_code_100 => "Error exists. Please contact IT operator.";

  /// "Card Problem. Please contact Card Center."
  String get acs_code_101 => "Card Problem. Please contact Card Center.";

  /// "Card Expired. Please contact Card Center."
  String get acs_code_104 => "Card Expired. Please contact Card Center.";

  /// "No Site Access Right. Please contact Card Center."
  String get acs_code_108 =>
      "No Site Access Right. Please contact Card Center.";

  /// "Please upload valid medical test result first."
  String get acs_code_109 => "Please upload valid medical test result first.";

  /// "Please access site by using Access Control System."
  String get acs_code_111 =>
      "Please access site by using Access Control System.";

  /// "Record exists. Please try again."
  String get acs_code_112 => "Record exists. Please try again.";

  /// "Smart Card ID"
  String get acs_smart_card_id => "Smart Card ID";

  /// "English Name"
  String get acs_english_name => "English Name";

  /// "Chinese Name"
  String get acs_chinese_name => "Chinese Name";

  /// "please scan qr code"
  String get acs_scan_qr_code => "please scan qr code";

  /// "Access Right"
  String get acs_access_right => "Access Right";

  /// "Medical Test"
  String get acs_medical_test => "Medical Test";

  /// "Invalid smart card id"
  String get acs_invalid_smart_card_id => "Invalid smart card id";

  /// "Invalid qr code"
  String get acs_invalid_qr_code => "Invalid qr code";

  /// "No record"
  String get no_record => "No record";

  /// "Negative"
  String get negative => "Negative";

  /// "Positive"
  String get positive => "Positive";

  /// "Base Infomation"
  String get acs_base_info => "Base Infomation";

  /// "CWRA."
  String get acs_cwra_no => "CWRA.";

  /// "Status"
  String get acs_status => "Status";

  /// "Vendor"
  String get acs_vendor => "Vendor";

  /// "Effective Date"
  String get acs_eff_date => "Effective Date";

  /// "Trade"
  String get acs_trade => "Trade";

  /// "Desc"
  String get acs_desc => "Desc";

  /// "Result"
  String get acs_result => "Result";
}

class _I18n_en_US extends I18n {
  const _I18n_en_US();

  @override
  TextDirection get textDirection => TextDirection.ltr;
}

class _I18n_zh_HK extends I18n {
  const _I18n_zh_HK();

  /// "新輝移動應用"
  @override
  String get main_title => "新輝移動應用";

  /// "用戶名"
  @override
  String get login_user_name => "用戶名";

  /// "密碼"
  @override
  String get login_password => "密碼";

  /// "重置"
  @override
  String get login_reset => "重置";

  /// "登錄"
  @override
  String get login_login => "登錄";

  /// "用戶名不能為空"
  @override
  String get login_user_empty_msg => "用戶名不能為空";

  /// "密碼不能為空"
  @override
  String get login_password_empty_msg => "密碼不能為空";

  /// "再按一次退出"
  @override
  String get login_back_tap => "再按一次退出";

  /// "快速鏈接"
  @override
  String get main_link => "快速鏈接";

  /// "當前天氣"
  @override
  String get main_weather => "當前天氣";

  /// "更新於"
  @override
  String get main_updated => "更新於";

  /// "系統提示"
  @override
  String get main_system_message => "系統提示";

  /// "請確認是否退出當前應用程式？"
  @override
  String get main_system_message_exit => "請確認是否退出當前應用程式？";

  /// "检测到新版本 ${version}"
  @override
  String main_check_version(String version) => "检测到新版本 ${version}";

  /// "是否要更新到最新版本?"
  @override
  String get main_update_version_confirm => "是否要更新到最新版本?";

  /// "是"
  @override
  String get main_update_yes => "是";

  /// "否"
  @override
  String get main_update_no => "否";

  /// "獲取Token失敗。"
  @override
  String get main_get_token_fail => "獲取Token失敗。";

  /// "當前用登入用戶已過期，請重新登入。"
  @override
  String get main_token_expiry => "當前用登入用戶已過期，請重新登入。";

  /// "登入失敗，請重試。"
  @override
  String get login_login_fail => "登入失敗，請重試。";

  /// "下载中，请稍后…"
  @override
  String get main_update_download => "下载中，请稍后…";

  /// "濕度"
  @override
  String get main_weather_humidity => "濕度";

  /// "版本"
  @override
  String get drawer_version => "版本";

  /// "註銷"
  @override
  String get drawer_exit => "註銷";

  /// "設定"
  @override
  String get drawer_setting => "設定";

  /// "語言"
  @override
  String get setting_language => "語言";

  /// "請選擇"
  @override
  String get setting_language_select => "請選擇";

  /// "確認要註銷嗎?"
  @override
  String get drawer_exit_message => "確認要註銷嗎?";

  /// "保存"
  @override
  String get language_save_yes => "保存";

  /// "取消"
  @override
  String get language_save_no => "取消";

  /// "掃碼考勤"
  @override
  String get acs_scan_attendance => "掃碼考勤";

  /// "職員資料"
  @override
  String get acs_scan_worker => "職員資料";

  /// "ACS應用列表"
  @override
  String get acs_applications_list => "ACS應用列表";

  /// "未選擇地盤，無法進入子應用"
  @override
  String get acs_unselected_site => "未選擇地盤，無法進入子應用";

  /// "請選擇地盤"
  @override
  String get acs_select_site => "請選擇地盤";

  /// "請選擇位置"
  @override
  String get acs_select_connection => "請選擇位置";

  /// "發生錯誤,請聯繫資訊科技組。"
  @override
  String get acs_code_100 => "發生錯誤,請聯繫資訊科技組。";

  /// "智能卡問題,請聯繫發卡中心。"
  @override
  String get acs_code_101 => "智能卡問題,請聯繫發卡中心。";

  /// "智能卡已過期,請聯繫發卡中心。"
  @override
  String get acs_code_104 => "智能卡已過期,請聯繫發卡中心。";

  /// "沒有地盤出入權限,請聯繫發卡中心。"
  @override
  String get acs_code_108 => "沒有地盤出入權限,請聯繫發卡中心。";

  /// "請先上傳有效的核酸檢測報告。"
  @override
  String get acs_code_109 => "請先上傳有效的核酸檢測報告。";

  /// "請使用工地通道管制系統出入。"
  @override
  String get acs_code_111 => "請使用工地通道管制系統出入。";

  /// "記錄已存在,請再嘗試一次。"
  @override
  String get acs_code_112 => "記錄已存在,請再嘗試一次。";

  /// "智能卡編號"
  @override
  String get acs_smart_card_id => "智能卡編號";

  /// "英文姓名"
  @override
  String get acs_english_name => "英文姓名";

  /// "中文姓名"
  @override
  String get acs_chinese_name => "中文姓名";

  /// "請掃描二維碼"
  @override
  String get acs_scan_qr_code => "請掃描二維碼";

  /// "出入權限"
  @override
  String get acs_access_right => "出入權限";

  /// "核酸檢測"
  @override
  String get acs_medical_test => "核酸檢測";

  /// "無效的智能卡編號"
  @override
  String get acs_invalid_smart_card_id => "無效的智能卡編號";

  /// "無效的二維碼"
  @override
  String get acs_invalid_qr_code => "無效的二維碼";

  /// "沒有記錄"
  @override
  String get no_record => "沒有記錄";

  /// "陰性"
  @override
  String get negative => "陰性";

  /// "陽性"
  @override
  String get positive => "陽性";

  /// "基礎資料"
  @override
  String get acs_base_info => "基礎資料";

  /// "CWRA卡編號"
  @override
  String get acs_cwra_no => "CWRA卡編號";

  /// "狀態"
  @override
  String get acs_status => "狀態";

  /// "承判商"
  @override
  String get acs_vendor => "承判商";

  /// "有效日期"
  @override
  String get acs_eff_date => "有效日期";

  /// "行業"
  @override
  String get acs_trade => "行業";

  /// "描述"
  @override
  String get acs_desc => "描述";

  /// "結果"
  @override
  String get acs_result => "結果";

  @override
  TextDirection get textDirection => TextDirection.ltr;
}

class GeneratedLocalizationsDelegate
    extends LocalizationsDelegate<WidgetsLocalizations> {
  const GeneratedLocalizationsDelegate();
  List<Locale> get supportedLocales {
    return const <Locale>[Locale("en", "US"), Locale("zh", "HK")];
  }

  LocaleResolutionCallback resolution({Locale fallback}) {
    return (Locale locale, Iterable<Locale> supported) {
      if (isSupported(locale)) {
        return locale;
      }
      final Locale fallbackLocale = fallback ?? supported.first;
      return fallbackLocale;
    };
  }

  @override
  Future<WidgetsLocalizations> load(Locale locale) {
    I18n._locale ??= locale;
    I18n._shouldReload = false;
    final String lang = I18n._locale != null ? I18n._locale.toString() : "";
    final String languageCode =
        I18n._locale != null ? I18n._locale.languageCode : "";
    if ("en_US" == lang) {
      return SynchronousFuture<WidgetsLocalizations>(const _I18n_en_US());
    } else if ("zh_HK" == lang) {
      return SynchronousFuture<WidgetsLocalizations>(const _I18n_zh_HK());
    } else if ("en" == languageCode) {
      return SynchronousFuture<WidgetsLocalizations>(const _I18n_en_US());
    } else if ("zh" == languageCode) {
      return SynchronousFuture<WidgetsLocalizations>(const _I18n_zh_HK());
    }

    return SynchronousFuture<WidgetsLocalizations>(const I18n());
  }

  @override
  bool isSupported(Locale locale) {
    for (var i = 0; i < supportedLocales.length && locale != null; i++) {
      final l = supportedLocales[i];
      if (l.languageCode == locale.languageCode) {
        return true;
      }
    }
    return false;
  }

  @override
  bool shouldReload(GeneratedLocalizationsDelegate old) => I18n._shouldReload;
}
