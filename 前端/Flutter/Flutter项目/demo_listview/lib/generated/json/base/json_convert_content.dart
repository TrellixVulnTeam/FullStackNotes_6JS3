// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:demo_listview/Model/listview_mode_copy_entity.dart';
import 'package:demo_listview/generated/json/listview_mode_copy_entity_helper.dart';
import 'package:demo_listview/Model/listview_mode_entity.dart';
import 'package:demo_listview/generated/json/listview_mode_entity_helper.dart';

class JsonConvert<T> {
	T fromJson(Map<String, dynamic> json) {
		return _getFromJson<T>(runtimeType, this, json);
	}

  Map<String, dynamic> toJson() {
		return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
    switch (type) {
			case ListviewModeCopyEntity:
				return listviewModeCopyEntityFromJson(data as ListviewModeCopyEntity, json) as T;
			case ListviewModeCopyData:
				return listviewModeCopyDataFromJson(data as ListviewModeCopyData, json) as T;
			case ListviewModeCopyDataPagination:
				return listviewModeCopyDataPaginationFromJson(data as ListviewModeCopyDataPagination, json) as T;
			case ListviewModeCopyDataList:
				return listviewModeCopyDataListFromJson(data as ListviewModeCopyDataList, json) as T;
			case ListviewModeCopyDataListData:
				return listviewModeCopyDataListDataFromJson(data as ListviewModeCopyDataListData, json) as T;
			case ListviewModeEntity:
				return listviewModeEntityFromJson(data as ListviewModeEntity, json) as T;
			case ListviewModeData:
				return listviewModeDataFromJson(data as ListviewModeData, json) as T;
			case ListviewModeDataPagination:
				return listviewModeDataPaginationFromJson(data as ListviewModeDataPagination, json) as T;
			case ListviewModeDataList:
				return listviewModeDataListFromJson(data as ListviewModeDataList, json) as T;
			case ListviewModeDataListData:
				return listviewModeDataListDataFromJson(data as ListviewModeDataListData, json) as T;    }
    return data as T;
  }

  static _getToJson<T>(Type type, data) {
		switch (type) {
			case ListviewModeCopyEntity:
				return listviewModeCopyEntityToJson(data as ListviewModeCopyEntity);
			case ListviewModeCopyData:
				return listviewModeCopyDataToJson(data as ListviewModeCopyData);
			case ListviewModeCopyDataPagination:
				return listviewModeCopyDataPaginationToJson(data as ListviewModeCopyDataPagination);
			case ListviewModeCopyDataList:
				return listviewModeCopyDataListToJson(data as ListviewModeCopyDataList);
			case ListviewModeCopyDataListData:
				return listviewModeCopyDataListDataToJson(data as ListviewModeCopyDataListData);
			case ListviewModeEntity:
				return listviewModeEntityToJson(data as ListviewModeEntity);
			case ListviewModeData:
				return listviewModeDataToJson(data as ListviewModeData);
			case ListviewModeDataPagination:
				return listviewModeDataPaginationToJson(data as ListviewModeDataPagination);
			case ListviewModeDataList:
				return listviewModeDataListToJson(data as ListviewModeDataList);
			case ListviewModeDataListData:
				return listviewModeDataListDataToJson(data as ListviewModeDataListData);
			}
			return data as T;
		}
  //Go back to a single instance by type
	static _fromJsonSingle<M>( json) {
		String type = M.toString();
		if(type == (ListviewModeCopyEntity).toString()){
			return ListviewModeCopyEntity().fromJson(json);
		}	else if(type == (ListviewModeCopyData).toString()){
			return ListviewModeCopyData().fromJson(json);
		}	else if(type == (ListviewModeCopyDataPagination).toString()){
			return ListviewModeCopyDataPagination().fromJson(json);
		}	else if(type == (ListviewModeCopyDataList).toString()){
			return ListviewModeCopyDataList().fromJson(json);
		}	else if(type == (ListviewModeCopyDataListData).toString()){
			return ListviewModeCopyDataListData().fromJson(json);
		}	else if(type == (ListviewModeEntity).toString()){
			return ListviewModeEntity().fromJson(json);
		}	else if(type == (ListviewModeData).toString()){
			return ListviewModeData().fromJson(json);
		}	else if(type == (ListviewModeDataPagination).toString()){
			return ListviewModeDataPagination().fromJson(json);
		}	else if(type == (ListviewModeDataList).toString()){
			return ListviewModeDataList().fromJson(json);
		}	else if(type == (ListviewModeDataListData).toString()){
			return ListviewModeDataListData().fromJson(json);
		}	
		return null;
	}

  //list is returned by type
	static M _getListChildType<M>(List data) {
		if(<ListviewModeCopyEntity>[] is M){
			return data.map<ListviewModeCopyEntity>((e) => ListviewModeCopyEntity().fromJson(e)).toList() as M;
		}	else if(<ListviewModeCopyData>[] is M){
			return data.map<ListviewModeCopyData>((e) => ListviewModeCopyData().fromJson(e)).toList() as M;
		}	else if(<ListviewModeCopyDataPagination>[] is M){
			return data.map<ListviewModeCopyDataPagination>((e) => ListviewModeCopyDataPagination().fromJson(e)).toList() as M;
		}	else if(<ListviewModeCopyDataList>[] is M){
			return data.map<ListviewModeCopyDataList>((e) => ListviewModeCopyDataList().fromJson(e)).toList() as M;
		}	else if(<ListviewModeCopyDataListData>[] is M){
			return data.map<ListviewModeCopyDataListData>((e) => ListviewModeCopyDataListData().fromJson(e)).toList() as M;
		}	else if(<ListviewModeEntity>[] is M){
			return data.map<ListviewModeEntity>((e) => ListviewModeEntity().fromJson(e)).toList() as M;
		}	else if(<ListviewModeData>[] is M){
			return data.map<ListviewModeData>((e) => ListviewModeData().fromJson(e)).toList() as M;
		}	else if(<ListviewModeDataPagination>[] is M){
			return data.map<ListviewModeDataPagination>((e) => ListviewModeDataPagination().fromJson(e)).toList() as M;
		}	else if(<ListviewModeDataList>[] is M){
			return data.map<ListviewModeDataList>((e) => ListviewModeDataList().fromJson(e)).toList() as M;
		}	else if(<ListviewModeDataListData>[] is M){
			return data.map<ListviewModeDataListData>((e) => ListviewModeDataListData().fromJson(e)).toList() as M;
		}
		throw Exception("not fond");
	}

  static M fromJsonAsT<M>(json) {
    if (json is List) {
      return _getListChildType<M>(json);
    } else {
      return _fromJsonSingle<M>(json) as M;
    }
  }
}